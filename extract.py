import openpyxl
import requests
from bs4 import BeautifulSoup
import xlwt
from retry_requests import retry
from requests import Session
import pandas as pd

#open all required documents
#if you're updating the xlsv files change the respective names here too
#if you're replacing the Exploit-DB Master file make sure you change the loop requiremnt
print("Please wait while we load all files....")
ps = openpyxl.load_workbook('required_files/Jan 31 CVEs.xlsx')
sheet = ps['Sheet1']
#print(sheet.max_row)

test = openpyxl.load_workbook('required_files/NVD Updated Data.xlsx')
test_sheet = test['Sheet1']

test1 = openpyxl.load_workbook('required_files/Exploit-DB Master Scrape.xlsx')
test_sheet1 = test1['Sheet1']

test2 = openpyxl.load_workbook('required_files/R@n$0mw@rE.xlsx')
test_sheet2 = test2['Ransomware - CVE']

test3 = openpyxl.load_workbook('required_files/APT Groups.xlsx')
test_sheet3 = test3['APT Groups']

#extract and initaize the CVE array

cve_array = []
for row in range(2,sheet.max_row + 1):
    cve_array.append(sheet['B'+str(row)].value)

final_arr = []

for i in range(len(cve_array)):
    if(cve_array[i] != None):
        final_arr.append(cve_array[i])
#print(final_arr)

#populate none values for all the available options

vendor = [None for x in range(0,len(final_arr))]
product = [None for x in range(0,len(final_arr))]
cwe = [None for x in range(0,len(final_arr))]
cvs = [None for x in range(0,len(final_arr))]
type = [None for x in range(0,len(final_arr))]
link = [None for x in range(0,len(final_arr))]
aptgroup = [None for x in range(0,len(final_arr))]
assoc_mal = [None for x in range(0,len(final_arr))]
malfamily = [None for x in range(0,len(final_arr))]
alert = [None for x in range(0,len(final_arr))]


#print(len(final_arr))
#print(len(vendor_arr))
#print(len(product_arr))
#print(len(cwe_arr))
#print(len(cvs_arr))

def all_details():
	i = 0
	for val in range(len(final_arr)):
	    print("Extracting for CVE count: "+ str(i), end="\r",flush=True)
	    i= i+1
	    found = False
	    for row in range(2,test_sheet.max_row + 1):
	        if(found == True):
	            break
	        if(final_arr[val] == test_sheet['A' + str(row)].value):
	            vendor[val] = test_sheet['B'+str(row)].value
	            product[val] = test_sheet['C'+str(row)].value
	            cwe[val] = test_sheet['H'+str(row)].value
	            cvs[val] = test_sheet['F'+str(row)].value
	            found = True
	
	print("\n")
	#print(vendor_arr)
	#print(product_arr)
	#print(cwe_arr)
	#print(cvs_arr)
	
	
	#in this loop the intial file has cve ids with no "CVE-" infront of it so i have added it
	i = 0
	for val in range(len(final_arr)):
	    print("Extracting for CVE count: "+ str(i), end="\r",flush=True)
	    i= i+1
	    found = False
	    for row in range(2,test_sheet1.max_row + 1):
	        if(found == True):
	            break
	        if(test_sheet1['D' + str(row)].value == None):
	          continue      
	        if(final_arr[val] == "CVE-"+test_sheet1['D' + str(row)].value):
	            type[val] = test_sheet1['F'+str(row)].value
	            link[val] = "https://www.exploit-db.com/exploits/" + test_sheet1['A'+str(row)].value
	            found = True
	
	#print(type_arr)
	print("\n")
	
	
	#import pandas
	#data = pandas.ExcelFile('APT Groups.xlsx')
	#data.sheet_names
	
	
	
	i = 0
	for val in range(len(final_arr)):
	    print("Extracting for CVE count: "+ str(i), end="\r",flush=True)
	    i= i+1
	    found = False
	    for row in range(2,test_sheet2.max_row + 1):
	        if(found == True):
	            break
	        # if(test_sheet2['D' + str(row)].value == None):
	        #   continue
	        #print("{0}, {1}".format(final_arr[val],test_sheet3['I' + str(row)].value))
	        if(final_arr[val] == test_sheet3['I' + str(row)].value):
	            aptgroup[val] = test_sheet3['B'+str(row)].value
	            assoc_mal[val] = test_sheet3['AA'+str(row)].value
	            malfamily[val] = test_sheet3['Z'+str(row)].value
	            found = True
	
	
	
	
	#import pandas
	#data = pandas.ExcelFile('R@n$0mw@rE.xlsx')
	#data.sheet_names
	
	
	i = 0
	for val in range(len(final_arr)):
	    print("Extracting for CVE count: "+ str(i), end="\r",flush=True)
	    i= i+1
	    found = False
	    for row in range(2,test_sheet2.max_row + 1):
	        if(found == True):
	            break
	        # if(test_sheet2['D' + str(row)].value == None):
	        #   continue
	       # print("{0}, {1}".format(final_arr[val],test_sheet2['L' + str(row)].value))
	        if(final_arr[val] == test_sheet2['L' + str(row)].value):
	            aptgroup[val] = test_sheet2['Q'+str(row)].value
	            malfamily[val] = test_sheet2['C'+str(row)].value
	            found = True
	
	print("\n")
	
	val = 1
	for i in range(len(final_arr)):
	    print("Extracting for CVE count: "+ str(val), end="\r",flush=True)
	    val= val+1
	    url='https://search.us-cert.gov/search?utf8=%E2%9C%93&affiliate=us-cert&sort_by=&query='+str(final_arr[i])
	    my_session = retry(Session(), retries=20, backoff_factor=0.5)
	    response = my_session.get(url)
	    soup = BeautifulSoup(response.text, "html.parser")
	    #print(div.text)
	    try:
	        div=soup.find('div',{'id':'results'})
	        h4=div.find_all('h4')
	        ll=[]
	        for j in h4:
	            li=j.a['href']
	            #print(li)
	            if 'https://us-cert.cisa.gov/' in li:
	                ll.append(li)
	                alert[i] = li
	    except:
	        #print("except block")
	        pass
	    #print(i)
	
	print("\n")
	new_file = openpyxl.load_workbook('required_files/Jan 31 CVEs.xlsx')
	new_sheet = new_file['Sheet1']
	
	i = 0
	for row in range(2,len(final_arr)+1):
	    #print(vendor_arr[i])
	    new_sheet['D'+str(row)].value = vendor[i]
	    #print(test_sheet['D'+str(row)].value)
	    new_sheet['E'+str(row)].value = product[i]
	    new_sheet['F'+str(row)].value = cwe[i]
	    new_sheet['G'+str(row)].value = cvs[i]
	    new_sheet['J'+str(row)].value = type[i]
	    new_sheet['I'+str(row)].value = link[i]
	    new_sheet['N'+str(row)].value = alert[i]
	    new_sheet['K'+str(row)].value = aptgroup[i]
	    new_sheet['L'+str(row)].value = assoc_mal[i]
	    new_sheet['M'+str(row)].value = malfamily[i]
	    i = i + 1
	tt = input("Enter a name for the file: ") 
	
	new_file.save(tt+'.xlsx')
	
	print(tt+".xlsx File is saved!")
	
def vendor_arr():
	vendor_arr = [None for x in range(len(final_arr))]
	i = 0
	for val in range(len(final_arr)):
	    print("Extracting for CVE count: "+ str(i), end="\r",flush=True)
	    i= i+1
	    found = False
	    for row in range(2,test_sheet.max_row + 1):
	        if(found == True):
	            break
	        if(final_arr[val] == test_sheet['A' + str(row)].value):
	            vendor_arr[val] = test_sheet['B'+str(row)].value
	            found = True
	
	print("\n")
	return vendor_arr
	
def product_arr():
	product_arr = [None for x in range(len(final_arr))]
	i = 0
	for val in range(len(final_arr)):
	    print("Extracting for CVE count: "+ str(i), end="\r",flush=True)
	    i= i+1
	    found = False
	    for row in range(2,test_sheet.max_row + 1):
	        if(found == True):
	            break
	        if(final_arr[val] == test_sheet['A' + str(row)].value):
	            product_arr[val] = test_sheet['C'+str(row)].value
	            found = True
	
	print("\n")
	return product_arr
	
def cwe_arr():
	cwe_arr = [None for x in range(len(final_arr))]
	i = 0
	for val in range(len(final_arr)):
	    print("Extracting for CVE count: "+ str(i), end="\r",flush=True)
	    i= i+1
	    found = False
	    for row in range(2,test_sheet.max_row + 1):
	        if(found == True):
	            break
	        if(final_arr[val] == test_sheet['A' + str(row)].value):
	            cwe_arr[val] = test_sheet['H'+str(row)].value
	            found = True
	
	print("\n")
	return cwe_arr
	
def cvs_arr():
	cvs_arr = [None for x in range(len(final_arr))]
	i = 0
	for val in range(len(final_arr)):
	    print("Extracting for CVE count: "+ str(i), end="\r",flush=True)
	    i= i+1
	    found = False
	    for row in range(2,test_sheet.max_row + 1):
	        if(found == True):
	            break
	        if(final_arr[val] == test_sheet['A' + str(row)].value):
	            cvs_arr[val] = test_sheet['F'+str(row)].value
	            found = True
	print("\n")
	return cvs_arr
	
def type_arr():
	type_arr = [None for x in range(len(final_arr))]
	i = 0
	#print(len(type_arr))
	for val in range(len(final_arr)):
	    print("Extracting for CVE count: "+ str(i), end="\r",flush=True)
	    i= i+1
	    found = False
	    for row in range(2,test_sheet1.max_row + 1):
	        if(found == True):
	            break
	        if(test_sheet1['D' + str(row)].value == None):
	          continue
	        #print("{0}, {1}".format(final_arr[val],"CVE-"+test_sheet1['A' + str(row)].value))
	        if(final_arr[val] == "CVE-"+test_sheet1['D' + str(row)].value):
	            type_arr[val] = test_sheet1['F'+str(row)].value
	            found = True
	
	#print(type_arr)
	print("\n")
	return type_arr

def link_arr():
	link_arr = [None for x in range(len(final_arr))]
	i = 0
	#print(len(type_arr))
	for val in range(len(final_arr)):
	    print("Extracting for CVE count: "+ str(i), end="\r",flush=True)
	    i= i+1
	    found = False
	    for row in range(2,test_sheet1.max_row + 1):
	        if(found == True):
	            break
	        if(test_sheet1['D' + str(row)].value == None):
	          continue
	        #print("{0}, {1}".format(final_arr[val],"CVE-"+test_sheet1['A' + str(row)].value))
	        if(final_arr[val] == "CVE-"+test_sheet1['D' + str(row)].value):
	            link_arr[val] = "https://www.exploit-db.com/exploits/" + test_sheet1['A'+str(row)].value
	            found = True
	
	#print(type_arr)
	print("\n")
	return link_arr
	
def aptgroup_arr():
	print("where to look?")
	print("1.apt_file")
	print("2.ransomeware_file")
	got = input("Enter(1 or 2): ")
	aptgroup_arr = [None for x in range(len(final_arr))]
	if(got == 1):
		i = 0
		print(len(type_arr))
		for val in range(len(final_arr)):
		    print("Extracting for CVE count: "+ str(i), end="\r",flush=True)
		    i= i+1
		    found = False
		    for row in range(2,test_sheet2.max_row + 1):
		        if(found == True):
		            break
		        # if(test_sheet2['D' + str(row)].value == None):
		        #   continue
		        #print("{0}, {1}".format(final_arr[val],test_sheet3['I' + str(row)].value))
		        if(final_arr[val] == test_sheet3['I' + str(row)].value):
		            aptgroup_arr[val] = test_sheet3['B'+str(row)].value
		            found = True
	else:
		i = 0
		#print(len(type_arr))
		for val in range(len(final_arr)):
		    print("Extracting for CVE count: "+ str(i), end="\r",flush=True)
		    i= i+1
		    found = False
		    for row in range(2,test_sheet2.max_row + 1):
		        if(found == True):
		            break
		        # if(test_sheet2['D' + str(row)].value == None):
		        #   continue
		       # print("{0}, {1}".format(final_arr[val],test_sheet2['L' + str(row)].value))
		        if(final_arr[val] == test_sheet2['L' + str(row)].value):
		            aptgroup_arr[val] = test_sheet2['Q'+str(row)].value
		            found = True
	
	print("\n")
	return aptgroup_arr

def malfamily_arr():
	print("where to look?")
	print("1.apt_file")
	print("2.ransomeware_file")
	got = input("Enter(1 or 2): ")
	malfamily_arr = [None for x in range(len(final_arr))]
	if(got == 1):
		i = 0
		#print(len(type_arr))
		for val in range(len(final_arr)):
		    print("Extracting for CVE count: "+ str(i), end="\r",flush=True)
		    i= i+1
		    found = False
		    for row in range(2,test_sheet2.max_row + 1):
		        if(found == True):
		            break
		        # if(test_sheet2['D' + str(row)].value == None):
		        #   continue
		        #print("{0}, {1}".format(final_arr[val],test_sheet3['I' + str(row)].value))
		        if(final_arr[val] == test_sheet3['I' + str(row)].value):
		            malfamily_arr[val] = test_sheet3['Z'+str(row)].value
		            found = True
	else:
		i = 0
		#print(len(type_arr))
		for val in range(len(final_arr)):
		    print("Extracting for CVE count: "+ str(i), end="\r",flush=True)
		    i= i+1
		    found = False
		    for row in range(2,test_sheet2.max_row + 1):
		        if(found == True):
		            break
		        # if(test_sheet2['D' + str(row)].value == None):
		        #   continue
		       # print("{0}, {1}".format(final_arr[val],test_sheet2['L' + str(row)].value))
		        if(final_arr[val] == test_sheet2['L' + str(row)].value):
		            malfamily_arr[val] = test_sheet2['C'+str(row)].value
		            found = True
	
	print("\n")
	return malfamily_arr
	
def assoc_mal_arr():
	assoc_mal_arr = [None for x in range(0,len(final_arr))]
	i = 0
	#print(len(type_arr))
	for val in range(len(final_arr)):
	    print("Extracting for CVE count: "+ str(i), end="\r",flush=True)
	    i= i+1
	    found = False
	    for row in range(2,test_sheet2.max_row + 1):
	        if(found == True):
	            break
	        # if(test_sheet2['D' + str(row)].value == None):
	        #   continue
	        #print("{0}, {1}".format(final_arr[val],test_sheet3['I' + str(row)].value))
	        if(final_arr[val] == test_sheet3['I' + str(row)].value):
	            aptgroup_arr[val] = test_sheet3['B'+str(row)].value
	            assoc_mal_arr[val] = test_sheet3['AA'+str(row)].value
	            malfamily_arr[val] = test_sheet3['Z'+str(row)].value
	            found = True
	print("\n")            
	return assoc_mal_arr            
	
def alert_arr():
	alert_arr = [None for x in range(len(final_arr))]
	val = 1
	for i in range(len(final_arr)):
	    print("Extracting for CVE count: "+ str(val), end="\r",flush=True)
	    val= val+1
	    url='https://search.us-cert.gov/search?utf8=%E2%9C%93&affiliate=us-cert&sort_by=&query='+str(final_arr[i])
	    my_session = retry(Session(), retries=20, backoff_factor=0.5)
	    response = my_session.get(url)
	    soup = BeautifulSoup(response.text, "html.parser")
	    #print(div.text)
	    try:
	        div=soup.find('div',{'id':'results'})
	        h4=div.find_all('h4')
	        ll=[]
	        for j in h4:
	            li=j.a['href']
	            #print(li)
	            if 'https://us-cert.cisa.gov/' in li:
	                ll.append(li)
	                alert_arr[i] = li
	    except:
	        #print("except block")
	        pass
	    #print(i)
	
	print("\n")
	return alert_arr

def write_to_file(c_arr,val_arr,file_name):
    with open(file_name, "w") as file1:
        for i in range(len(c_arr)):
            file1.write(str(c_arr[i]) + " : " + str(val_arr[i]) + "\n")
	

user_in = 0

while (user_in != 12):

	print("                  OPTIONS                       ")
	print("------------------------------------------------")
	print("1.Extract all details (will be saved to xlsx file)")
	print("2.Vendor (returns an array)")
	print("3.Product info (returns an array)")
	print("4.CWE id (returns an array)")
	print("5.CVSS score (returns an array)")
	print("6.Known Exploits (returns an array)")
	print("7.Type of Exploit info (returns an array)")
	print("8.APT Groups info (returns an array)")
	print("9.Associated Malware (returns an array)")
	print("10. Ransomeware Family (returns an array)")
	print("11. CISA Alert links (returns an array)")
	print("12.exit")
	
	user_in = input("Enter the option: ")
	user_in = int(user_in)
	
	if(user_in == 1):
		print(all_details())
		
	elif(user_in == 2):
		vut = input("want output in file(1=yes,  2=no): ")
		if(int(vut) == 1):
			file_name = input("Enter the file name: ")
			write_to_file(final_arr,vendor_arr(),str(file_name))
		else:
			print(vendor_arr())
		
	elif(user_in == 3):
		vut = input("want output in file(1=yes,  2=no): ")
		if(int(vut) == 1):
			file_name = input("Enter the file name: ")
			write_to_file(final_arr,product_arr(),str(file_name))
		else:	
			print(product_arr())
		
	elif(user_in == 4):
		vut = input("want output in file(1=yes,  2=no): ")
		if(int(vut) == 1):
			file_name = input("Enter the file name: ")
			write_to_file(final_arr,cwe_arr(),str(file_name))
		else:
			print(cwe_arr())
		
	elif(user_in == 5):
		vut = input("want output in file(1=yes,  2=no): ")
		if(int(vut) == 1):
			file_name = input("Enter the file name: ")
			write_to_file(final_arr,cvs_arr(),str(file_name))
		else:
			print(cvs_arr())
		
	elif(user_in == 6):
		vut = input("want output in file(1=yes,  2=no): ")
		if(int(vut) == 1):
			file_name = input("Enter the file name: ")
			write_to_file(final_arr,link_arr(),str(file_name))
		else:
			print(link_arr())
		
	elif(user_in == 7):
		vut = input("want output in file(1=yes,  2=no): ")
		if(int(vut) == 1):
			file_name = input("Enter the file name: ")
			write_to_file(final_arr,type_arr(),str(file_name))
		else:
			print(type_arr())
		
	elif(user_in == 8):
		vut = input("want output in file(1=yes,  2=no): ")
		if(int(vut) == 1):
			file_name = input("Enter the file name: ")
			write_to_file(final_arr,aptgroup_arr(),str(file_name))
		else:
			print(aptgroup_arr())
		
	elif(user_in == 9):
		vut = input("want output in file(1=yes,  2=no): ")
		if(int(vut) == 1):
			file_name = input("Enter the file name: ")
			write_to_file(final_arr,assoc_mal_arr(),str(file_name))
		else:
			print(assoc_mal_arr())
		
	elif(user_in == 10):
		vut = input("want output in file(1=yes,  2=no): ")
		if(int(vut) == 1):
			file_name = input("Enter the file name: ")
			write_to_file(final_arr,malfamily_arr(),str(file_name))
		else:
			print(malfamily_arr())
		
	elif(user_in == 11):
		vut = input("want output in file(1=yes,  2=no): ")
		if(int(vut) == 1):
			file_name = input("Enter the file name: ")
			write_to_file(final_arr,alert_arr(),str(file_name))
		else:
			print(alert_arr())
		
	elif(user_in == 12):
		break
